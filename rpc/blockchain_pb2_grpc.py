# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import blockchain_pb2 as blockchain__pb2


class BlockchainStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getBlock = channel.unary_unary(
                '/blockchain.Blockchain/getBlock',
                request_serializer=blockchain__pb2.BlockRequest.SerializeToString,
                response_deserializer=blockchain__pb2.Block.FromString,
                )
        self.getBlocks = channel.unary_unary(
                '/blockchain.Blockchain/getBlocks',
                request_serializer=blockchain__pb2.BlockRequest.SerializeToString,
                response_deserializer=blockchain__pb2.Blocks.FromString,
                )
        self.getTransaction = channel.unary_unary(
                '/blockchain.Blockchain/getTransaction',
                request_serializer=blockchain__pb2.TransactionRequest.SerializeToString,
                response_deserializer=blockchain__pb2.Transaction.FromString,
                )
        self.getTransactions = channel.unary_unary(
                '/blockchain.Blockchain/getTransactions',
                request_serializer=blockchain__pb2.TransactionRequest.SerializeToString,
                response_deserializer=blockchain__pb2.Transactions.FromString,
                )
        self.addTransaction = channel.unary_unary(
                '/blockchain.Blockchain/addTransaction',
                request_serializer=blockchain__pb2.Transaction.SerializeToString,
                response_deserializer=blockchain__pb2.Success.FromString,
                )
        self.addTransactions = channel.unary_unary(
                '/blockchain.Blockchain/addTransactions',
                request_serializer=blockchain__pb2.Transactions.SerializeToString,
                response_deserializer=blockchain__pb2.Success.FromString,
                )
        self.getBaseFee = channel.unary_unary(
                '/blockchain.Blockchain/getBaseFee',
                request_serializer=blockchain__pb2.BaseFeeRequest.SerializeToString,
                response_deserializer=blockchain__pb2.BaseFee.FromString,
                )


class BlockchainServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBlocks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBaseFee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlockchainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.getBlock,
                    request_deserializer=blockchain__pb2.BlockRequest.FromString,
                    response_serializer=blockchain__pb2.Block.SerializeToString,
            ),
            'getBlocks': grpc.unary_unary_rpc_method_handler(
                    servicer.getBlocks,
                    request_deserializer=blockchain__pb2.BlockRequest.FromString,
                    response_serializer=blockchain__pb2.Blocks.SerializeToString,
            ),
            'getTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.getTransaction,
                    request_deserializer=blockchain__pb2.TransactionRequest.FromString,
                    response_serializer=blockchain__pb2.Transaction.SerializeToString,
            ),
            'getTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.getTransactions,
                    request_deserializer=blockchain__pb2.TransactionRequest.FromString,
                    response_serializer=blockchain__pb2.Transactions.SerializeToString,
            ),
            'addTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.addTransaction,
                    request_deserializer=blockchain__pb2.Transaction.FromString,
                    response_serializer=blockchain__pb2.Success.SerializeToString,
            ),
            'addTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.addTransactions,
                    request_deserializer=blockchain__pb2.Transactions.FromString,
                    response_serializer=blockchain__pb2.Success.SerializeToString,
            ),
            'getBaseFee': grpc.unary_unary_rpc_method_handler(
                    servicer.getBaseFee,
                    request_deserializer=blockchain__pb2.BaseFeeRequest.FromString,
                    response_serializer=blockchain__pb2.BaseFee.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'blockchain.Blockchain', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Blockchain(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blockchain.Blockchain/getBlock',
            blockchain__pb2.BlockRequest.SerializeToString,
            blockchain__pb2.Block.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBlocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blockchain.Blockchain/getBlocks',
            blockchain__pb2.BlockRequest.SerializeToString,
            blockchain__pb2.Blocks.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blockchain.Blockchain/getTransaction',
            blockchain__pb2.TransactionRequest.SerializeToString,
            blockchain__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blockchain.Blockchain/getTransactions',
            blockchain__pb2.TransactionRequest.SerializeToString,
            blockchain__pb2.Transactions.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blockchain.Blockchain/addTransaction',
            blockchain__pb2.Transaction.SerializeToString,
            blockchain__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blockchain.Blockchain/addTransactions',
            blockchain__pb2.Transactions.SerializeToString,
            blockchain__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBaseFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blockchain.Blockchain/getBaseFee',
            blockchain__pb2.BaseFeeRequest.SerializeToString,
            blockchain__pb2.BaseFee.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
